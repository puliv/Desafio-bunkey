{"version":3,"sources":["redux/actions/index.js","redux/actions/actionTypes.js","components/Operator.js","components/Inputs.js","components/Result.js","App.js","serviceWorker.js","redux/reducer/index.js","redux/reducer/reducer.js","redux/store/index.js","index.js"],"names":["numOne","dispatch","valueOne","type","payload","numTwo","valueTwo","operations","operatorSign","theResult","totalResult","Operator","_this","this","react_default","a","createElement","className","onChange","e","props","chooseOperator","target","value","Component","connect","state","Object","objectSpread","Inputs","onClick","content","reducer","fetch","currentOperation","method","body","mode","headers","Content-Type","Origin","then","data","json","getResult","result","catch","error","console","calculate","_this2","getFirstValue","getSecondValue","components_Operator","Result","outcome","components_Inputs","components_Result","Boolean","window","location","hostname","match","combineReducers","arguments","length","undefined","action","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c138b363.chunk.js","sourcesContent":["import * as actions from \"./actionTypes\";\n\nexport const numOne = dispatch => valueOne => {\n    dispatch({\n        type: actions.FIRST_VALUE,\n        payload: valueOne\n    })\n}\nexport const numTwo = dispatch => valueTwo => {\n    dispatch({\n        type: actions.SECOND_VALUE,\n        payload: valueTwo\n    })\n}\nexport const operations = dispatch => operatorSign => {\n    dispatch({\n        type: actions.OPERATION,\n        payload: {\n            operatorSign: operatorSign\n        }\n    })\n}\nexport const theResult = dispatch => totalResult => {\n    dispatch({\n        type: actions.RESULT,\n        payload: totalResult\n    })\n}","export const FIRST_VALUE = 'FIRST VALUE'\nexport const SECOND_VALUE = 'SECOND VALUE'\nexport const OPERATION = 'OPERATION'\nexport const RESULT = 'RESULT'","import React, { Component } from 'react'\nimport { operations } from '../redux/actions/index'\nimport { connect } from 'react-redux'\nimport '../App.css';\n\n\nclass Operator extends Component {\n\n    render() {\n        return (\n            <div className=\"calculator\">\n                <select onChange={(e) => this.props.chooseOperator(e.target.value)}>\n                    <option value=\"sumar\" >Sumar</option>\n                    <option value=\"restar\" >Restar</option>\n                    <option value=\"multipicar\" >Multiplicar</option>\n                    <option value=\"dividir\" >Dividir</option>\n                </select>\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        ...state\n    };\n};\n\nconst mapActionsToProps = (dispatch) => {\n    return {\n        chooseOperator: operations(dispatch)\n    };\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(Operator)","import React, { Component } from 'react'\nimport Operator from './Operator'\nimport { connect } from 'react-redux'\nimport { numOne, numTwo, theResult } from '../redux/actions/index'\nimport '../App.css';\n\nclass Inputs extends Component {\n\n    onClick = () => {\n        const calculate = () => {\n            let content = '';\n            content = content + 'num1=' + this.props.reducer.valueOne + '&num2=' + this.props.reducer.valueTwo;\n            // console.log(content)\n            let url = 'https://cors-anywhere.herokuapp.com/http://test.bunkey.tv:3000/';\n            // console.log(this.props.reducer.currentOperation);\n            fetch(url + this.props.reducer.currentOperation,\n                {\n                    method: 'POST',\n                    body: content,\n                    mode: 'cors',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                        'Origin': 'application/x-www-form-urlencoded',\n                    }\n                })\n                .then(data => data.json())\n                .then(data => {\n                    // console.log(data)\n                    this.props.getResult(data.result)\n                })\n                .catch(error => console.error('Error:', error));\n        };\n        calculate();\n    }\n\n    render() {\n        return (\n            <div className=\"calculator\">\n                <input\n                    className=\"inputs\"\n                    type='text'\n                    onChange={(e) => this.props.getFirstValue(e.target.value)}\n                />\n                <input\n                    className=\"inputs\"\n                    type='text'\n                    onChange={(e) => this.props.getSecondValue(e.target.value)}\n                />\n                <Operator />\n                <button\n                    onClick={this.onClick} >\n                    Calcular\n                </button>\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    // console.log(state)\n    return {\n        ...state\n    };\n};\n\nconst mapActionsToProps = (dispatch) => {\n    return {\n        getFirstValue: numOne(dispatch),\n        getSecondValue: numTwo(dispatch),\n        getResult: theResult(dispatch)\n    };\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(Inputs)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport '../App.css';\n\n\n\nclass Result extends Component {\n\n    render() {\n        return (\n            <div className=\"calculator result\">\n                Resultado: <p className=\"calculator\">{this.props.reducer.outcome}</p>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    ...state\n});\n\nexport default connect(mapStateToProps)(Result);\n","import React from 'react';\nimport './App.css';\nimport Inputs from './components/Inputs';\nimport Result from './components/Result';\nimport { connect } from 'react-redux'\n\nfunction App() {\n  return (\n    <div className=\"calculator\">\n      <Inputs />\n      <Result />\n    </div>\n  );\n}\n\nexport default connect()(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport reducer from './reducer'\n\nexport default combineReducers ({\n    reducer\n})","import { FIRST_VALUE, SECOND_VALUE, OPERATION, RESULT } from '../actions/actionTypes';\n\nexport default (\n    state = {\n        valueOne: '',\n        valueTwo: '',\n        currentOperation: null,\n        outcome: '0'\n    }, action) => {\n    switch (action.type) {\n        case FIRST_VALUE:\n            return {\n                ...state,\n                valueOne: action.payload\n            };\n        case SECOND_VALUE:\n            return {\n                ...state,\n                valueTwo: action.payload\n            };\n        case OPERATION:\n            return {\n                ...state,\n                currentOperation: action.payload.operatorSign\n            };\n        case RESULT:\n            return {\n                ...state,\n                outcome: action.payload\n            };\n        default: return state\n    }\n}\n\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer from '../reducer';\n\nexport default createStore(\n    reducer,\n    { }, //Initial State\n    composeWithDevTools(applyMiddleware(thunkMiddleware))\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './redux/store/index'\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}